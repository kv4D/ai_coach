from aiogram import Router, F, Bot
from aiogram.methods import delete_my_commands
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.utils.formatting import as_marked_list
from aiogram.utils.chat_action import ChatActionSender
from service.api import create_user, get_activity_levels, get_activity_levels_descriptions
from states.create_profile import CreateProfile
from states.main import Main
from validators.user import validate_activity_level, validate_age, \
    validate_gender, validate_height, validate_weight
from keyboards.start import get_gender_kb, get_activity_level_kb
from keyboards.menu_buttons import set_main_menu


router = Router()


@router.message(CommandStart())
async def handle_start_command(message: Message, state: FSMContext, bot: Bot):
    """Handle /start command.
    User starts the bot by sending the /start command.
    Start collecting user's data.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
        bot (Bot): Bot object
    """
    await state.clear()
    await bot.delete_my_commands()
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ. –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–∏–º—è</b>',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(CreateProfile.sending_name)


@router.message(F.text, CreateProfile.sending_name)
async def process_name(message: Message, state: FSMContext):
    """Process user's name.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
    """
    await state.update_data(username=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π <b>–≤–æ–∑—Ä–∞—Å—Ç</b>',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(CreateProfile.sending_age)


@router.message(F.text, CreateProfile.sending_age)
async def process_age(message: Message, state: FSMContext):
    """Process user's age.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
    """
    try:
        age = validate_age(message.text)
        # some other checks
        await message.answer('–£–∫–∞–∂–∏ —Å–≤–æ–π <b>–ø–æ–ª</b>', 
                            reply_markup=get_gender_kb())
        await state.update_data(age=age)
        await state.set_state(CreateProfile.sending_gender)
    except ValueError as e:
        await message.answer(str(e))


@router.message(F.text, CreateProfile.sending_gender)
async def process_gender(message: Message, state: FSMContext):
    """Process user's gender.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
    """
    try:
        gender = validate_gender(message.text)
        await state.update_data(gender=gender)
        await message.answer('–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π <b>—Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>',
                            reply_markup=ReplyKeyboardRemove())
        await state.set_state(CreateProfile.sending_height)
    except ValueError as e:
        await message.answer(str(e))


@router.message(F.text, CreateProfile.sending_height)
async def process_height(message: Message, state: FSMContext):
    """Process user's height.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
    """
    try:
        height = validate_height(message.text)
        # some checks
        await message.answer('–£–∫–∞–∂–∏ —Å–≤–æ–π <b>–≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö</b>',
                            reply_markup=ReplyKeyboardRemove())
        await state.update_data(height_cm=height)
        await state.set_state(CreateProfile.sending_weight)
    except ValueError as e:
        await message.answer(str(e))


@router.message(F.text, CreateProfile.sending_weight)
async def process_weight(message: Message, state: FSMContext, bot: Bot):
    """Process user's weight.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
        bot (Bot): Bot object
    """
    try:
        weight = validate_weight(message.text)
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            levels = await get_activity_levels()
            descriptions = await get_activity_levels_descriptions()
            levels_descriptions = [
                f"–£—Ä–æ–≤–µ–Ω—å {level}:\n{descriptions[level]}\n\n" for level in levels
                ]

            await state.update_data(weight_kg=weight)
            
            content = as_marked_list(*levels_descriptions, marker="üèÜ ") 
            await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π <b>—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>',
                                reply_markup=ReplyKeyboardRemove())
            await message.answer(**content.as_kwargs(), 
                                reply_markup=await get_activity_level_kb())
            await state.set_state(CreateProfile.sending_activity_level)
    except ValueError as e:
        await message.answer(str(e))


@router.message(F.text, CreateProfile.sending_activity_level)
async def process_activity_level(message: Message, state: FSMContext, bot: Bot):
    """Process user's activity level.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
        bot (Bot): Bot object
    """
    try:
        activity_level = await validate_activity_level(message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π <b>—Ü–µ–ª–∏</b>: –¥–ª—è —á–µ–≥–æ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è,'
                            '—á–µ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∏—Ç—å—Å—è –∏ –ø—Ä–æ—á–µ–µ. –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–æ—é –ø–æ–º–æ—â—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ–π.\n\n'
                            '–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç —Ü–µ–ª–∏, —Ç–æ –º–æ–∂–µ—à—å —Ç–∞–∫ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å', 
                            reply_markup=ReplyKeyboardRemove())
        await state.update_data(activity_level=activity_level)
        await state.set_state(CreateProfile.sending_goal)
    except ValueError as e:
        await message.answer(str(e))
    

@router.message(F.text, CreateProfile.sending_goal)
async def process_goal(message: Message, state: FSMContext, bot: Bot):
    """Process user's goal.
    User has finished collecting all the data.
    Create user in the API's database OR update existing user.
    Clear the state, set 'Main' state.

    Args:
        message (Message): Message object
        state (FSMContext): FSMContext object
        bot (Bot): Bot object
    """
    await state.update_data(goal=message.text)
    await message.answer('–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ!\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.'
                         '\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é\n–°–æ–≤–µ—Ç—É—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                         reply_markup=ReplyKeyboardRemove())
    user_data = await state.get_data()
    user_data['id'] = message.from_user.id

    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await create_user(user_data)
    await state.clear()
    await set_main_menu(bot)
    await state.set_state(Main.main_menu)
