from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.chat_action import ChatActionSender
from bot.service.service import get_activity_levels_description, create_user
from bot.api.client import APIClient
from bot.states.create_profile import CreateProfile
from bot.states.main import Main
from bot.keyboards.common import get_gender_kb, get_activity_level_kb
from bot.keyboards.commands import set_menu, set_cancel
from bot.filters.user import UserExistsFilter
from bot.models.user import User
from bot.models.activity_level import ActivityLevel
from bot.utils import get_command_descriptions


router = Router()


@router.message(Command('cancel'), StateFilter(CreateProfile), UserExistsFilter())
async def handle_cancel_command(message: Message,
                                state: FSMContext,
                                bot: Bot):
    """
    Handle /cancel command of an old user.

    Cancel updating their profile.
    """
    await state.clear()
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã ‚ùå',
                         reply_markup=ReplyKeyboardRemove())
    await set_menu(bot, message.chat.id)
    await state.set_state(Main.main)


@router.message(CommandStart(), StateFilter(Main.main), UserExistsFilter())
async def handle_old_user_start_command(message: Message,
                                        state: FSMContext,
                                        bot: Bot):
    """
    Handle /start command, but from a user that is
    already in the database.

    Set state flag and give a chance to
    revert changes.
    Start collecting user's data.
    Begin with user's age.
    """
    await state.clear()
    await message.answer('–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω—É–ª—è üìã\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/cancel</b> üîô',
                         reply_markup=ReplyKeyboardRemove())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–æ–∑—Ä–∞—Å—Ç</b> üå±')
    await bot.delete_my_commands()
    await set_cancel(bot, message.chat.id)
    await state.set_state(CreateProfile.sending_age)


@router.message(CommandStart(), StateFilter(None, Main.main), ~UserExistsFilter())
async def handle_new_user_start_command(message: Message,
                                        state: FSMContext,
                                        bot: Bot):
    """
    Handle /start command from a new user.

    User starts the bot by sending the /start command.
    Start collecting user's data.
    Begin with user's age.
    """
    await state.clear()
    await bot.delete_my_commands()
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º üëã\n–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å üìã',
                         reply_markup=ReplyKeyboardRemove())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–æ–∑—Ä–∞—Å—Ç</b> üå±')
    await state.set_state(CreateProfile.sending_age)


@router.message(F.text, CreateProfile.sending_age)
async def process_age(message: Message, state: FSMContext):
    """
    Process user's age.
    If everything is OK: try to get gender.
    """
    age = User.validate_age(message.text)
    keyboard = get_gender_kb()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>–ø–æ–ª</b> ‚ôÄÔ∏è‚ôÇÔ∏è',
                         reply_markup=keyboard)
    await state.update_data(age=age)
    await state.set_state(CreateProfile.sending_gender)


@router.message(F.text, CreateProfile.sending_gender)
async def process_gender(message: Message, state: FSMContext):
    """
    Process user's gender.
    If everything is OK: try to get height.
    """
    gender = User.validate_gender(message.text)
    await state.update_data(gender=gender)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b> üìè',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(CreateProfile.sending_height)


@router.message(F.text, CreateProfile.sending_height)
async def process_height(message: Message, state: FSMContext):
    """
    Process user's height.
    If everything is OK: try to get weight.
    """
    height = User.validate_height_cm(message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>–≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö</b> ‚öñÔ∏è',
                         reply_markup=ReplyKeyboardRemove())
    await state.update_data(height_cm=height)
    await state.set_state(CreateProfile.sending_weight)


@router.message(F.text, CreateProfile.sending_weight)
async def process_weight(message: Message,
                         state: FSMContext,
                         bot: Bot,
                         api_client: APIClient):
    """
    Process user's weight.
    If everything is OK: try to get activity level.
    """
    weight = User.validate_weight_kg(message.text)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        levels_info = await get_activity_levels_description(api_client)

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à <b>—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b> üîã',
                             reply_markup=ReplyKeyboardRemove())

        keyboard = await get_activity_level_kb(api_client)

        await message.answer(levels_info,
                             reply_markup=keyboard)
        await state.update_data(weight_kg=weight)
        await state.set_state(CreateProfile.sending_activity_level)


@router.message(F.text, CreateProfile.sending_activity_level)
async def process_activity_level(message: Message,
                                 state: FSMContext):
    """
    Process user's activity level.
    If everything is OK: try to get user's goal.
    """
    activity_level = ActivityLevel.validate_level(message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π <b>—Ü–µ–ª–∏</b> üéØ: –¥–ª—è —á–µ–≥–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å,'
                         '—á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –∏ –ø—Ä–æ—á–µ–µ. –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–æ—é –ø–æ–º–æ—â—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ–π.\n\n'
                         '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–∏, —Ç–æ –º–æ–∂–µ—Ç–µ —Ç–∞–∫ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å',
                         reply_markup=ReplyKeyboardRemove())
    await state.update_data(activity_level=activity_level)
    await state.set_state(CreateProfile.sending_goal)


@router.message(F.text, CreateProfile.sending_goal)
async def process_goal(message: Message,
                       state: FSMContext,
                       bot: Bot,
                       api_client: APIClient):
    """
    Process user's goal.
    User has finished collecting all the data.
    Send this data to service.
    Clear the state, set 'main' state.
    """
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await state.update_data(goal=message.text)
        user_data = await state.get_data()
        user = User(**user_data,
                    id=message.from_user.id)
        await create_user(user, api_client=api_client)

    await message.answer('–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ!\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ üíØ'
                         '\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é\n–°–æ–≤–µ—Ç—É—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
                         f'–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n{await get_command_descriptions(bot)}',
                         reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await set_menu(bot, chat_id=message.chat.id)
    await state.set_state(Main.main)
