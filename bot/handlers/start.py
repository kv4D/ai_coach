from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.utils.formatting import as_marked_list
from service.api import create_user
from states.create_profile import CreateProfile
from keyboards.start import get_gender_kb, get_activity_level_kb

router = Router()


@router.message(CommandStart())
async def handle_start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ. –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–∏–º—è</b>')
    await state.set_state(CreateProfile.sending_name)

@router.message(F.text, CreateProfile.sending_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π <b>–≤–æ–∑—Ä–∞—Å—Ç</b>')
    await state.set_state(CreateProfile.sending_age)

@router.message(F.text, CreateProfile.sending_age)
async def process_age(message: Message, state: FSMContext):
    age = message.text
    if age is None or not age.isnumeric():
        await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        return
    # some other checks
    await message.answer(f'–£–∫–∞–∂–∏ —Å–≤–æ–π <b>–ø–æ–ª</b>', reply_markup=get_gender_kb())
    await state.update_data(age=int(age))
    await state.set_state(CreateProfile.sending_gender)

@router.message(F.text, CreateProfile.sending_gender)
async def process_gender(message: Message, state: FSMContext):
    gender = message.text
    print(gender)
    if gender is None:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª')
        return
    if gender.lower()[:3] == '–º—É–∂':
        await state.update_data(gender='male')
    elif gender.lower()[:3] == '–∂–µ–Ω':
        await state.update_data(gender='female')
    else: 
        await message.reply('–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
        return
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π <b>—Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</b>',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(CreateProfile.sending_height)

@router.message(F.text, CreateProfile.sending_height)
async def process_height(message: Message, state: FSMContext):
    height = message.text
    if height is None or not height.isnumeric():
        await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        return
    # some other checks
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è–º –Ω–∏–∂–µ')
    
    # simulation
    # TODO: change later with API
    level_descriptions = [
        ('1', '–°–∏–¥—è—á–∏–π'),
        ('2', '–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π'),
        ('3', '–ê–∫—Ç–∏–≤–Ω—ã–π'),
        ('4', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π'),
        ('5', '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π')
    ]
    
    level_descriptions = [
        f"<b>–£—Ä–æ–≤–µ–Ω—å {i[0]}</b>:\n{i[1]}\n\n" for i in level_descriptions
        ]

    content = as_marked_list(*level_descriptions, marker="üèÜ ") 

    await message.answer(**content.as_kwargs(), reply_markup=get_activity_level_kb())
    await state.update_data(height_cm=float(height.replace(',','.')))
    await state.set_state(CreateProfile.sending_weight)


@router.message(F.text, CreateProfile.sending_activity_level)
async def process_activity_level(message: Message, state: FSMContext):
    activity_level = message.text
    if activity_level not in [1, 2, 3, 4, 5]:
        await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
        return
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π <b>–≤–µ—Å (–∫–∏–ª–æ–≥—Ä–∞–º–º—ã)</b>', reply_markup=ReplyKeyboardRemove())
    await state.update_data(activity_level=activity_level)
    await state.set_state(CreateProfile.sending_weight)

@router.message(F.text, CreateProfile.sending_weight)
async def process_weight(message: Message, state: FSMContext):
    weight = message.text
    if weight is None or not weight.isnumeric():
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        return
    # some other checks
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π <b>—Ü–µ–ª–∏</b>: –¥–ª—è —á–µ–≥–æ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è,'
                         f'—á–µ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∏—Ç—å—Å—è –∏ –ø—Ä–æ—á–µ–µ. –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–æ—é –ø–æ–º–æ—â—å—é –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ–π.\n\n'
                         f'–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç —Ü–µ–ª–∏, —Ç–æ –º–æ–∂–µ—à—å —Ç–∞–∫ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å')
    await state.update_data(height_cm=float(weight.replace(',','.')))
    await state.set_state(CreateProfile.sending_goal)

@router.message(F.text, CreateProfile.sending_goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer(f'–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ!\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.'
                         f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é\n–°–æ–≤–µ—Ç—É—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
    # it is worth to check if user already in DB
    # probably we can delete them and create again
    user_data = await state.get_data()
    print(create_user(user_data))
    await state.clear()
    